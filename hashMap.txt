# Time - O(1) amortized 
# Space - O(1000) average case; O(1000000) worst case
# Chaining LinkedList solution - Create dummy node -1 in the array and then point that to a LinkedList

class Node:
    def __init__(self, key=None, value=None, next=None):
        self.key = key
        self.value = value
        self.next = next
        
class MyHashMap:

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.array = [-1 for _ in range(1001)]

    def put(self, key: int, value: int) -> None:
        """
        value will always be non-negative.
        """
        if type(self.array[key%1000]) == int:
            self.array[key%1000] = Node(-1)
        curNode = self.array[key%1000]
        while curNode.next:
            if curNode.key == key:
                curNode.value = value
                return
            curNode = curNode.next
        if curNode.key == key: 
            curNode.value = value
            return
        curNode.next = Node(key, value)
        return

    def get(self, key: int) -> int:
        """
        Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key
        """
        if type(self.array[key%1000]) != int:
            curNode = self.array[key%1000]
            while curNode:
                if curNode.key == key:
                    return curNode.value
                curNode = curNode.next
        return -1

    def remove(self, key: int) -> None:
        """
        Removes the mapping of the specified value key if this map contains a mapping for the key
        """
        if type(self.array[key%1000]) != int:
            curNode = self.array[key%1000]
            if curNode.next:
                prev = curNode
                cur = curNode.next
                while cur:
                    if cur.key == key:
                        prev.next = cur.next
                        return
                    prev = cur
                    cur = cur.next
        return    


# Your MyHashMap object will be instantiated and called as such:
# obj = MyHashMap()
# obj.put(key,value)
# param_2 = obj.get(key)
# obj.remove(key)