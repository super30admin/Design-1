/*
**************Time complexity*************
O(N/K) - K is the number of buckets
******************************************
**************Space Complexity************
O(K + M) - M is the number of unique keys
******************************************
*/
class MyHashMap {
    vector<list<pair<int, int>>> m_map;
    int m_prime = 2341;
    
    int hash(int key){
        return key % m_prime;
    }
    
    list<pair<int,int>>::iterator search(int key){
        int idx = hash(key);
        for (auto it = m_map[idx].begin(); it != m_map[idx].end(); ++it){
            pair<int,int> temp = (*it);
            if (temp.first == key && it != m_map[idx].end()) return it;
        }
        return m_map[idx].end();
    }
public:
    /** Initialize your data structure here. */
    MyHashMap() {
        m_map.resize(m_prime);        
    }
    
    /** value will always be non-negative. */
    void put(int key, int value) {
        int idx = hash(key);
        auto it = search(key);
        if (it != m_map[idx].end()) m_map[idx].erase(it);
        m_map[idx].push_back({key, value});
    }
    
    /** Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key */
    int get(int key) {
        int idx = hash(key);
        auto it = search(key);
        if (it != m_map[idx].end()) return (*it).second;
        return -1;
    }
    
    /** Removes the mapping of the specified value key if this map contains a mapping for the key */
    void remove(int key) {
        int idx = hash(key);
        auto it = search(key);
        if (it != m_map[idx].end()) m_map[idx].erase(it);
    }
};

/**
 * Your MyHashMap object will be instantiated and called as such:
 * MyHashMap* obj = new MyHashMap();
 * obj->put(key,value);
 * int param_2 = obj->get(key);
 * obj->remove(key);
 */
