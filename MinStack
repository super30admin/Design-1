// Time Complexity : 
push O(1)
Pop O(1)
// Space Complexity : O(n)
// Did this code successfully run on Leetcode : yes
// Any problem you faced while coding this : 
Forgot to initialize int min = Integer.MAX_VALUE; code was accepted but test cases failed. Fixed that.


// Your code here along with comments explaining your approach

class MinStack {

    Stack<Integer> s1;
    int min = Integer.MAX_VALUE;

    /** initialize your data structure here. */
    public MinStack() {
        s1 = new Stack();
    }
    
    public void push(int x) {
    // If min is bigger than incoving value is changing push the old min value first and then the current value.
        if (x <= min) {
            s1.push(min);
            min = x;
        }
        s1.push(x);
    }
    
    public void pop() {
        if (s1.pop() == min) {
            min = s1.pop();
        }
    }
    
    public int top() {
        return s1.peek();
    }
    
    public int getMin() {
        return min;
    }
}

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(x);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */
