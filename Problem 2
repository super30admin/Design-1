/ Time Complexity : O(1)
// Space Complexity : O(n)
// Did this code successfully run on Leetcode : yes
// Any problem you faced while coding this : no


// Your code here along with comments explaining your approach

class MinStack {
    
    private Stack<int[]> st;
    private int min;
    

    public MinStack() {
        st = new Stack<>();
        min = Integer.MAX_VALUE;
    }
    
    public void push(int val) {
        
        if(st.isEmpty()){
            min = val;
            st.push(new int[]{min, val});
        }
        else{
            min = Math.min(val, st.peek()[0]);
            st.push(new int[]{min, val});
        }       
    }
    
    public void pop() {
         if(!st.isEmpty())
            st.pop();       
    }
    
    public int top() {
         if(!st.isEmpty()){
            return st.peek()[1];
        }
        else 
            return -1;
    }
    
    public int getMin() {
        if(!st.isEmpty())
            return st.peek()[0]; 
        else 
            return -1;
    }
    
}
/*
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(val);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */
