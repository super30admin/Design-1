"""" Time Complexity: O(1) for Push, Pop, Top and getMin
     Space Complexity: O(n)
""""
class MinStack:

    def __init__(self):
        #inialising mini to infity, stack and minStack and the then appending mini            in minstack
        self.mini = float("inf")
        self.stack = []
        self.min_stack = []
        self.min_stack.append (self.mini)


    def push(self, x: int) -> None:
        #comparing the minimum val and then appending it
        self.mini = min(self.mini,x)
        self.stack.append(x)
        self.min_stack.append(self.mini)

    def pop(self) -> None:
        #poping the values and then updtaing the mini
            self.stack.pop()
            self.min_stack.pop()
            self.mini = self.min_stack[-1]


    def top(self) -> int:
        return self.stack[-1]

    def getMin(self) -> int:
        return self.min_stack[-1]


# Your MinStack object will be instantiated and called as such:
# obj = MinStack()
# obj.push(val)
# obj.pop()
# param_3 = obj.top()
# param_4 = obj.getMin()