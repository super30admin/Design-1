# -*- coding: utf-8 -*-
"""hashmap_.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QwkKfIkqHc4ZM9lo-LtSLlglmILMsMsY
"""

class Node:

    def __init(self,key=-1 , value=-1):
        self.key = key
        self.value = value
        self.next = None

class MyHashMap:

    def get_hashkey(self,key):
        return key % 1000
    
    def Search(self,head,key):
        prevNode = head
        currNode = head.next
        while currNode != None and currNode.key != key:
            prevNode = currNode
            currNode = currNode.next

        return prevNode
        


    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.buckets = 1000
        Storage = [None]*1000




    def put(self, key, value) :
        """
        value will always be non-negative.
        """
        p = key % 1000
        if (Storage[p] is None):
            Storage[p] = Node()

        prev = Search(p,key)
        
        if (p.next is None):
            prev.next = Node()
        else:
            prev.next.value = value

          

    def get(self, key) :
        """
        Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key
        """
        p = key % 1000

        if (storage[p] is None):
            return -1
        else:
            val = search(p,key)
            if (val is not None):
             return val.next.value
            else:
                return -1
        

    def remove(self, key) :
        """
        Removes the mapping of the specified value key if this map contains a mapping for the key
        """

        p = key % 1000
        if(Storage[p] is not None):
            prev = search(p,key)
            if(prev is not None):
                prev.next  = prev.next.next
        


# Your MyHashMap object will be instantiated and called as such:
obj = MyHashMap()
obj.put(1,2)
param_2 = obj.get(1)
obj.remove(1)



#******Note********

#The Code is not working I can do this problem using double hashing method like I did in HashSet(Leetcode - 705)
# What is wrong in this, please explain or if possible I would LIke to schedule  a zoom call to understand this