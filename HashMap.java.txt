// Time Complexity : O(n) and average case would be O(1)
// Space Complexity : O(n)
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this : No


// Your code here along with comments explaining your approach


class MyHashMap {
    
    private class Node {
        private int key;
        private int val;
        private Node next;
        
        public Node(int key, int val) {
            this.key = key;
            this.val = val;
        }
    }
    
    private Node[] nodes;
    private final int BUCKETS;
    /** Initialize your data structure here. */
    public MyHashMap() {
        this.BUCKETS = 10000;
        this.nodes = new Node[this.BUCKETS];
    }
    
    private int getIndex(int key) {
        return Integer.hashCode(key) % this.BUCKETS;
    }
    
    private Node find(Node head, int key) {
        Node prev = head;
        Node curr = head.next;
        
        while(curr != null && curr.key != key) {
            prev = curr;
            curr = curr.next;
        }
        
        return prev;
    }
    
    /** value will always be non-negative. */
    public void put(int key, int value) {
        int bucketIdx = this.getIndex(key);
        
        if(this.nodes[bucketIdx] == null) {
            this.nodes[bucketIdx] = new Node(-1, -1);
        }
        
        Node prev = this.find(this.nodes[bucketIdx], key);
        
        if(prev.next == null) {
            prev.next = new Node(key, value); 
        } else {
            prev.next.val = value;
        }
    }
    
    /** Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key */
    public int get(int key) {
        int bucketIdx = this.getIndex(key);
        
        if(this.nodes[bucketIdx] == null) return -1;
        
        Node prev = this.find(this.nodes[bucketIdx], key);
        
        if(prev.next == null) return -1;
        
        return prev.next.val;
    }
    
    /** Removes the mapping of the specified value key if this map contains a mapping for the key */
    public void remove(int key) {
        int bucketIdx = this.getIndex(key);
        
        if(this.nodes[bucketIdx] == null) return;
        
        Node prev = this.find(this.nodes[bucketIdx], key);
        
        if(prev.next == null) return;
        
        prev.next = prev.next.next;
    }
}

/**
 * Your MyHashMap object will be instantiated and called as such:
 * MyHashMap obj = new MyHashMap();
 * obj.put(key,value);
 * int param_2 = obj.get(key);
 * obj.remove(key);
 */