class MyHashMap {
    
    public class ListNode{
        int key,val;
        ListNode next;
        
        ListNode(int key, int val){
            this.key = key;
            this.val = val;
        }
    }
    private ListNode[] hashMap;
    
    /** Initialize your data structure here. */
    public MyHashMap() {
        hashMap = new ListNode[1000000];
    }
    
    // helper function to calculate hassh value to place value in hashmap
    public int hashFunc(int key){
        return key % hashMap.length;
    }
//    Method to find element present in hashmap
    public ListNode findElem(int key,int index){
        if(hashMap[index]==null){
            hashMap[index] = new ListNode(-1,-1);
            return hashMap[index];
        }
        else{
            ListNode prev = hashMap[index];
            while(prev.next!=null && prev.next.key!=key){
                prev = prev.next;
            }
            return prev;
        }
    }
    
    /** value will always be non-negative. */
    public void put(int key, int value) {
        int index = hashFunc(key);
        ListNode prev = findElem(key,index);
        if(prev.next!=null){
            prev.next.val = value;
        }
        prev.next = new ListNode(key,value);
    }
    
    /** Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key */
    public int get(int key) {
        int index = hashFunc(key);
        ListNode prev = findElem(key,index);
        if(prev.next==null){
            return -1;
        }
        else{
            return prev.next.val;        
        }
    }
    
    /** Removes the mapping of the specified value key if this map contains a mapping for the key */
    public void remove(int key) {
        int index = hashFunc(key);
        ListNode prev = findElem(key,index);
        if(prev.next!=null){
            //we found the element
            prev.next = prev.next.next;
        }
    }
}
